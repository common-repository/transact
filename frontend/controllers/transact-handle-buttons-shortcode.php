<?php

namespace Transact\FrontEnd\Controllers\Shortcode;

use Transact\FrontEnd\Controllers\Buttons\transactHandleButtons;
require_once  plugin_dir_path(__FILE__) . 'transact-handle-buttons.php';


/**
 * It will take care of print different buttons generated by shortcode
 *
 * Class transactHandleShortcodeButtons
 */
class transactHandleShortcodeButtons extends transactHandleButtons
{
    protected $class;

    protected $purchase_text;

    protected $subscribe_text;

    protected $button_type;

    protected $is_single;

    public function __construct($post_id, $transact_api, $purchase_text,
        $subscribe_text, $button_type, $call_to_action, $display_promo)
    {
        parent::__construct($post_id, $transact_api);
        $this->purchase_text = $purchase_text;
        $this->subscribe_text = $subscribe_text;
        $this->button_type = $button_type;
        $this->is_single = (is_single() || get_post_type() === 'page');
        $this->call_to_action = $call_to_action;
        $this->display_promo = $display_promo;
    }

    /**
     * Avoid to show buttons on archive
     *
     * @param null $number_of_words
     *
     * @return string
     */
    public function print_purchase_buttons( $number_of_words = null )
    {
        if ($this->is_single) {
            return parent::print_purchase_buttons($number_of_words);
        } else {
            return '';
        }
    }

    public function should_display_call_to_action()
    {

        if (empty($this->call_to_action)) {
            return FALSE;
        } else if ($this->call_to_action == "1") {
            return TRUE;
        } else {
            return FALSE;
        }
    }


    public function should_display_promo()
    {

        if (!isset($this->display_promo)) {
            return TRUE;
        } else if ($this->display_promo == "0") {
            return FALSE;
        } else {
            return TRUE;
        }
    }

    /**
     * Getting button text depending button type
     * @param $button_type
     * @return string|void
     */
    protected function get_button_text($button_type)
    {
        if ($button_type === \Transact\Models\TransactPostButtonTypes::ONLY_PURCHASE) {
            if (empty($this->purchase_text)) {
                $button_text = parent::get_button_text($button_type);
            } else {
                $button_text = $this->purchase_text;
            }
        } else {
            if (empty($this->subscribe_text)) {
                $button_text = parent::get_button_text($button_type);
            } else {
                $button_text = $this->subscribe_text;
            }
        }
        return $button_text;
    }

    /**
     * Checks if publisher has subscription
     * @return bool
     */
    private function has_publisher_subscription()
    {
        $has_subscription = false;
        if (isset($this->options['subscription']) && $this->options['subscription'])
        {
            $has_subscription = true;
        }
        return $has_subscription;
    }

}